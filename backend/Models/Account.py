#######################################################
# 
# Account.py
# Python implementation of the Class Account
# Generated by Enterprise Architect
# Created on:      29-Nov-2021 6:55:28 PM
# Original author: acast
# 
#######################################################

from Card import (
    Card
)
from CardCreateInfo import CardCreateInfo
from Transaction import (
    Transaction
)
from Shared.Enums.Currency import (
    Currency
)
from Shared.BankConfig import (
    BankConfigParser
)
from Shared.BankNumbers import (
    BankNumbers
)
from datetime import (
    date, datetime
)
import os


class Account():
    def __init__(
        self,
        currency: Currency,
        accountNumber: str = None,
        accountBalance:float = 0,
        maintanceCost: float = None, 
        dateCreated: datetime = datetime.today(),
        blocked: bool = False,
        cards: list[Card] = [],
        transactions: list[Transaction] = []
        ) -> None:
        """
            Default parameters should be used when creating new account
        """
        config = BankConfigParser()
        bankGen = BankNumbers()
        if not accountNumber:
            self.accountNumber = bankGen.GenerateAccountNumber()
        else:
            self.accountNumber = accountNumber

        if not maintanceCost:
            self.maitanceCost = config.AccountMaintanceCost
        else:
            self.maitanceCost = maintanceCost

        self.currency = currency
        self.accountBalance = accountBalance
        self.dateCreated = dateCreated
        self.blocked = blocked
        self.cards = cards
        self.transactions = transactions

    def HasCard(self, cardInfo: CardCreateInfo)-> bool:
        exists = False
        for c in self.cards:
            if c.cardHolder == cardInfo.cardHolder and
                c.cardProcessor == cardInfo.cardProcessor and
                c.cardType == cardInfo.cardType:
                exists = True
                break
        return exists

    def GetCSVFileReport(self,
        startDate:datetime = None,
        endDate:datetime = None)-> str:
        fileCreatedTime = datetime.today().strftime("%Y%m%d-%H%M%S")
        fileName = f"Report for {self.accountNumber.replace('-', ' ')} on {fileCreatedTime}.csv"        

        filePath = os.path.join(
            os.getcwd(), "Reports", "Accounts", fileName
        )

        f = open(filePath, 'w')
        f.write(self.GetCSVReport(startDate, endDate))
        f.close()

    def GetCSVReport(self,
        startDate: datetime = None,
        endDate: datetime = None)-> str:

        blockedStr = lambda T: "Yes" if self.blocked else "No"
        accountInfo = f"""
# Account info:
Account number, {self.accountNumber}
Currency, {Currency(self.currency).name}
Date Created, {self.dateCreated.isoformat()}
Current balance, {self.accountBalance}
Maintance cost, {self.maitanceCost}
Blocked, {blockedStr}

# Transactions between {startDate.isoformat()} and {endDate.isoformat()}:

        """

        for t in self.transactions:
            if t.preciseTime >= startDate and t.preciseTime <= endDate:
                accountInfo += t.GetCSVReport()

        return accountInfo